{"version":3,"file":"file.service.js","sourceRoot":"","sources":["../../../src/services/file.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;IAOzC,qBACU,MAAc,EAEd,UAAsB;QAFtB,WAAM,GAAN,MAAM,CAAQ;QAEd,eAAU,GAAV,UAAU,CAAY;KAE/B;IAED,yBAAG,GAAH,UAAI,MAAc;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE;YAClC,EAAE,EAAE,MAAM;SACX,CAAC,CAAC;KACJ;IAED,mDAAmD;;IACnD,4BAAM;;IAAN,UAAO,OAAiB,EAAE,YAA2B,EAAE,UAAyB;QAAhF,iBAeC;QAfyB,6BAAA,EAAA,mBAA2B;QAAE,2BAAA,EAAA,iBAAyB;QAC9E,OAAO,IAAI,UAAU,CAAC,UAAA,QAAQ;YAC5B,IAAG,CAAC,OAAO;gBAAE,OAAO,QAAQ,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACrD,IAAI,IAAI,GAAQ;gBACd,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACxD,IAAI,EAAE,OAAO,CAAC,IAAI;iBACnB,CAAC;aACH,CAAA;YACD,IAAG,YAAY;gBAAE,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;YAC5C,IAAG,UAAU;gBAAE,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;YACtC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC;iBACpC,SAAS,CAAC,UAAA,QAAQ;gBACjB,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACzB,EAAE,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAArB,CAAqB,CAAC,CAAC;SACtC,CAAC,CAAC;KACJ;IAED,0BAAI,GAAJ,UAAK,IAAU;QACb,OAAO,IAAI,UAAU,CAAC,UAAA,QAAQ;YAC5B,IAAG,CAAC,IAAI;gBAAE,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAC9B,MAAM,CAAC,MAAM,GAAG,UAAC,CAAM;gBACrB,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,QAAQ,EAAE,IAAI,CAAC,IAAI;oBACnB,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM;iBACxB,CAAC,CAAC;aACJ,CAAA;YACD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC5B,CAAC,CAAC;KACJ;IAEO,qCAAe,GAAvB,UAAwB,UAAkB;QACxC,IAAI,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACjD,OAAO;YACL,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;YAC/C,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC;SAC/B,CAAC;KACH;;gBAxDF,UAAU;;;;gBAPU,MAAM;gBAGlB,UAAU;;sBAHnB;;SAQa,WAAW","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nimport { ApiService } from './api.service';\n\nimport { IAppFile, IAppHTTPResponse } from '../misc/interfaces';\n\n@Injectable()\nexport class FileService {\n\n  constructor(\n    private ngZone: NgZone,\n\n    private apiService: ApiService\n  ) {\n  }\n\n  get(fileId: string): Observable<IAppHTTPResponse> {\n    return this.apiService.GET('/file', {\n      id: fileId\n    });\n  }\n\n  // TODO: https://xkeshi.github.io/image-compressor/\n  upload(appFile: IAppFile, customFolder: string = null, customName: string = null): Observable<IAppHTTPResponse> {\n    return new Observable(observer => {\n      if(!appFile) return observer.error('No local file!');\n      let body: any = {\n        file: Object.assign(this.base64Breakdown(appFile.base64), {\n          name: appFile.name\n        })\n      }\n      if(customFolder) body.folder = customFolder;\n      if(customName) body.name = customName;\n      this.apiService.POST('/file', {}, body)\n        .subscribe(response => {\n          observer.next(response);\n        }, error => observer.error(error));\n    });\n  }\n\n  load(file: File): Observable<IAppFile> {\n    return new Observable(observer => {\n      if(!file) return observer.error(null);\n      let reader = new FileReader();\n      reader.onload = (e: any) => {\n        observer.next({\n          name: file.name,\n          size: file.size,\n          mimeType: file.type,\n          base64: e.target.result\n        });\n      }\n      reader.readAsDataURL(file);\n    });\n  }\n\n  private base64Breakdown(base64Data: string) {\n    var breakdownData = base64Data.split(';base64,');\n    return {\n      mimeType: breakdownData[0].replace('data:', ''),\n      base64String: breakdownData[1]\n    };\n  }\n\n\n\n}\n"]}