{"version":3,"file":"file.service.js","sourceRoot":"","sources":["../../../src/services/file.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;IAKzC,qBACU,MAAc,EAEd,UAAsB;QAFtB,WAAM,GAAN,MAAM,CAAQ;QAEd,eAAU,GAAV,UAAU,CAAY;KAE/B;IAED,yBAAG,GAAH,UAAI,MAAc;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE;YAClC,EAAE,EAAE,MAAM;SACX,CAAC,CAAC;KACJ;IAGD,mDAAmD;;IACnD,4BAAM;;IAAN,UAAO,IAAU,EAAE,YAA2B;QAA9C,iBAkBC;QAlBkB,6BAAA,EAAA,mBAA2B;QAC5C,OAAO,IAAI,UAAU,CAAC,UAAA,QAAQ;YAC5B,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAC9B,MAAM,CAAC,MAAM,GAAG,UAAC,CAAM;gBACrB,IAAI,IAAI,GAAQ;oBACd,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;wBACzD,IAAI,EAAE,IAAI,CAAC,IAAI;qBAChB,CAAC;iBACH,CAAA;gBACD,IAAG,YAAY;oBAAE,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC;gBAC5C,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC;qBACtC,IAAI,CAAC,UAAA,QAAQ;oBACZ,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACrB,CAAC,CAAC;aACJ,CAAA;YACD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC5B,CAAC,CAAC;KACJ;IAEO,qCAAe,GAAvB,UAAwB,UAAU;QAChC,IAAI,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACjD,OAAO;YACL,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;YAC/C,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC;SAC/B,CAAC;KACH;;gBA5CF,UAAU;;;;gBALU,MAAM;gBAGlB,UAAU;;sBAHnB;;SAMa,WAAW","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ApiService } from './api.service';\n\n@Injectable()\nexport class FileService {\n\n  constructor(\n    private ngZone: NgZone,\n\n    private apiService: ApiService\n  ) {\n  }\n\n  get(fileId: string) {\n    return this.apiService.GET('/file', {\n      id: fileId\n    });\n  }\n\n\n  // TODO: https://xkeshi.github.io/image-compressor/\n  upload(file: File, customFolder: string = null): Observable<any> {\n    return new Observable(observer => {\n      let reader = new FileReader();\n      reader.onload = (e: any) => {\n        let body: any = {\n          file: Object.assign(this.base64Breakdown(e.target.result), {\n            name: file.name\n          })\n        }\n        if(customFolder) body.folder = customFolder;\n        this.apiService.POST('/file', {}, body)\n        .then(response => {\n          observer.next(response);\n          observer.complete();\n        });\n      }\n      reader.readAsDataURL(file);\n    });\n  }\n\n  private base64Breakdown(base64Data) {\n    var breakdownData = base64Data.split(';base64,');\n    return {\n      mimeType: breakdownData[0].replace('data:', ''),\n      base64String: breakdownData[1]\n    };\n  }\n\n\n\n}\n"]}